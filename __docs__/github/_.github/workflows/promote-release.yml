name: 02 Promote Release

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: 'Release branch to promote (format: release/vX.Y.Z)'
        required: true
      final_tag:
        description: 'Ignored; tag is derived from release_branch as vX.Y.Z'
        required: false
        default: ''
      targets:
        description: 'Targets: prod1,prod2,both'
        required: true
        default: 'both'

permissions:
  contents: write
  actions: write

concurrency:
  group: promote-${{ inputs.release_branch }}
  cancel-in-progress: false

jobs:
  guard-allowlist:
    name: Check actor allowlist (optional)
    runs-on: ubuntu-latest
    steps:
      - name: Validate allowed deployers
        shell: bash
        env:
          ALLOWED: ${{ vars.ALLOWED_DEPLOYERS || '' }}
        run: |
          if [ -z "$ALLOWED" ]; then
            echo "No ALLOWED_DEPLOYERS var set; skipping allowlist check"; exit 0;
          fi
          IFS=',' read -ra USERS <<< "$ALLOWED"
          for u in "${USERS[@]}"; do [ "$u" = "${{ github.actor }}" ] && exit 0; done
          echo "Actor '${{ github.actor }}' not allowed (ALLOWED_DEPLOYERS=$ALLOWED)" >&2
          exit 1

  set-freeze:
    name: Start freeze (best-effort)
    needs: guard-allowlist
    runs-on: ubuntu-latest
    steps:
      - name: Set RELEASE_FREEZE=1 via gh api (best-effort)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          # Try to set repo variable; ignore failures
          gh api \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPOSITORY}/actions/variables/RELEASE_FREEZE" \
            -f name='RELEASE_FREEZE' -f value='1' || \
          gh api \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPOSITORY}/actions/variables" \
            -f name='RELEASE_FREEZE' -f value='1' || true

  tag-and-release:
    name: Tag final and create GitHub Release
    needs: set-freeze
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.compute_tag.outputs.tag_name }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure git identity (actor)
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
      - name: Fetch
        run: git fetch --all --prune

      - name: Checkout release branch
        run: |
          git checkout -B "${{ inputs.release_branch }}" origin/"${{ inputs.release_branch }}"

      - name: Compute final tag
        id: compute_tag
        shell: bash
        run: |
          set -euo pipefail
          BR="${{ inputs.release_branch }}"
          if ! echo "$BR" | grep -Eq '^release/v[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "release_branch '$BR' must match release/vX.Y.Z" >&2; exit 1;
          fi
          VER=${BR#release/}
          # VER is like v1.2.3 already
          echo "tag_name=$VER" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        shell: bash
        run: |
          TAG=${{ steps.compute_tag.outputs.tag_name }}
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists"
          else
            git tag -a "$TAG" -m "Release $TAG by ${{ github.actor }}"
            git push origin "$TAG"
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.compute_tag.outputs.tag_name }}
          name: ${{ steps.compute_tag.outputs.tag_name }}
          generate_release_notes: true

  build-prod1:
    name: Build for prod1
    needs: tag-and-release
    if: inputs.targets == 'prod1' || inputs.targets == 'both'
    uses: ./.github/workflows/_build-reusable.yml
    with:
      ref: ${{ needs.tag-and-release.outputs.tag_name }}
      branch: ''
      node_version: '20'

  deploy-prod1-step:
    name: Deploy to prod1
    needs: [build-prod1, tag-and-release]
    if: inputs.targets == 'prod1' || inputs.targets == 'both'
    uses: ./.github/workflows/_deploy-reusable.yml
    with:
      environment: prod1
      ref: ${{ needs.tag-and-release.outputs.tag_name }}
      branch: ''

  build-prod2:
    name: Build for prod2
    needs: tag-and-release
    if: inputs.targets == 'prod2' || inputs.targets == 'both'
    uses: ./.github/workflows/_build-reusable.yml
    with:
      ref: ${{ needs.tag-and-release.outputs.tag_name }}
      branch: ''
      node_version: '20'

  deploy-prod2-step:
    name: Deploy to prod2
    needs: [build-prod2, tag-and-release]
    if: inputs.targets == 'prod2' || inputs.targets == 'both'
    uses: ./.github/workflows/_deploy-reusable.yml
    with:
      environment: prod2
      ref: ${{ needs.tag-and-release.outputs.tag_name }}
      branch: ''
      

  merge-back-to-main-prod1:
    if: inputs.targets == 'prod1'
    name: Merge release back to main (after prod1)
    needs: [deploy-prod1-step]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure git identity (actor)
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
      - name: Fetch
        run: git fetch --all --prune

      - name: Merge release -> main (signoff)
        shell: bash
        run: |
          set -euo pipefail
          git checkout -B main origin/main || git checkout -b main
          git merge --no-ff --no-edit -s recursive -X theirs --signoff "origin/${{ inputs.release_branch }}" || true
          git push origin HEAD:main

  merge-back-to-main-prod2:
    if: inputs.targets == 'prod2'
    name: Merge release back to main (after prod2)
    needs: [deploy-prod2-step]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure git identity (actor)
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
      - name: Fetch
        run: git fetch --all --prune

      - name: Merge release -> main (signoff)
        shell: bash
        run: |
          set -euo pipefail
          git checkout -B main origin/main || git checkout -b main
          git merge --no-ff --no-edit -s recursive -X theirs --signoff "origin/${{ inputs.release_branch }}" || true
          git push origin HEAD:main

  merge-back-to-main-both:
    if: inputs.targets == 'both'
    name: Merge release back to main (after prod1 & prod2)
    needs: [deploy-prod1-step, deploy-prod2-step]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Configure git identity (actor)
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"
      - name: Fetch
        run: git fetch --all --prune

      - name: Merge release -> main (signoff)
        shell: bash
        run: |
          set -euo pipefail
          git checkout -B main origin/main || git checkout -b main
          git merge --no-ff --no-edit -s recursive -X theirs --signoff "origin/${{ inputs.release_branch }}" || true
          git push origin HEAD:main

  delete-release-branch-prod1:
    if: inputs.targets == 'prod1'
    name: Delete release branch on remote (prod1)
    needs: [merge-back-to-main-prod1]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Delete remote branch (best-effort)
        run: |
          set -euo pipefail
          BR="${{ inputs.release_branch }}"
          echo "Deleting origin/$BR to prevent future pushes/triggers..."
          git ls-remote --exit-code --heads origin "$BR" >/dev/null 2>&1 && \
            git push origin --delete "$BR" || \
            echo "Branch $BR not found on remote; skipping"

  delete-release-branch-prod2:
    if: inputs.targets == 'prod2'
    name: Delete release branch on remote (prod2)
    needs: [merge-back-to-main-prod2]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Delete remote branch (best-effort)
        run: |
          set -euo pipefail
          BR="${{ inputs.release_branch }}"
          echo "Deleting origin/$BR to prevent future pushes/triggers..."
          git ls-remote --exit-code --heads origin "$BR" >/dev/null 2>&1 && \
            git push origin --delete "$BR" || \
            echo "Branch $BR not found on remote; skipping"

  delete-release-branch-both:
    if: inputs.targets == 'both'
    name: Delete release branch on remote (both)
    needs: [merge-back-to-main-both]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Delete remote branch (best-effort)
        run: |
          set -euo pipefail
          BR="${{ inputs.release_branch }}"
          echo "Deleting origin/$BR to prevent future pushes/triggers..."
          git ls-remote --exit-code --heads origin "$BR" >/dev/null 2>&1 && \
            git push origin --delete "$BR" || \
            echo "Branch $BR not found on remote; skipping"

  clear-freeze-prod1:
    if: inputs.targets == 'prod1' && always()
    name: Clear freeze (best-effort, prod1)
    needs: [delete-release-branch-prod1]
    runs-on: ubuntu-latest
    steps:
      - name: Unset RELEASE_FREEZE via gh api (best-effort)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          gh api -X PATCH -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPOSITORY}/actions/variables/RELEASE_FREEZE" \
            -f name='RELEASE_FREEZE' -f value='0' || true

  clear-freeze-prod2:
    if: inputs.targets == 'prod2' && always()
    name: Clear freeze (best-effort, prod2)
    needs: [delete-release-branch-prod2]
    runs-on: ubuntu-latest
    steps:
      - name: Unset RELEASE_FREEZE via gh api (best-effort)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          gh api -X PATCH -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPOSITORY}/actions/variables/RELEASE_FREEZE" \
            -f name='RELEASE_FREEZE' -f value='0' || true

  clear-freeze-both:
    if: inputs.targets == 'both' && always()
    name: Clear freeze (best-effort, both)
    needs: [delete-release-branch-both]
    runs-on: ubuntu-latest
    steps:
      - name: Unset RELEASE_FREEZE via gh api (best-effort)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          gh api -X PATCH -H "Accept: application/vnd.github+json" \
            "/repos/${GITHUB_REPOSITORY}/actions/variables/RELEASE_FREEZE" \
            -f name='RELEASE_FREEZE' -f value='0' || true
