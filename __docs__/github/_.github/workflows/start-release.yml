name: 01 Start Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release SemVer (e.g., 1.2.3). If empty, next patch is computed automatically.'
        required: false
        default: ''
      base_ref:
        description: 'Base ref to branch from (default: test)'
        required: true
        default: 'test'

permissions:
  contents: write

concurrency:
  group: start-release
  cancel-in-progress: false

jobs:
  guard-allowlist:
    name: Check actor allowlist (release starters)
    runs-on: ubuntu-latest
    steps:
      - name: Validate allowed starters
        shell: bash
        env:
          ALLOWED: ${{ vars.ALLOWED_RELEASE_STARTERS || '' }}
        run: |
          if [ -z "$ALLOWED" ]; then
            echo "No ALLOWED_RELEASE_STARTERS set; skipping allowlist check"; exit 0;
          fi
          IFS=',' read -ra USERS <<< "$ALLOWED"
          for u in "${USERS[@]}"; do [ "$u" = "${{ github.actor }}" ] && exit 0; done
          echo "Actor '${{ github.actor }}' not allowed (ALLOWED_RELEASE_STARTERS=$ALLOWED)" >&2
          exit 1

  gate-start:
    name: Approval to start release
    needs: guard-allowlist
    runs-on: ubuntu-latest
    environment: start-release
    steps:
      - name: Await approval
        run: echo "Approved to start release"

  create-branch-and-tag:
    name: Create release branch and RC tag
    needs: gate-start
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.names.outputs.branch }}
      rc: ${{ steps.names.outputs.rc }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git identity (actor)
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor_id }}+${{ github.actor }}@users.noreply.github.com"

      - name: Fetch
        run: git fetch --all --prune

      - name: Compute next SemVer (optional input) and names
        id: names
        shell: bash
        env:
          VERSION: ${{ inputs.version }}
        run: |
          set -euo pipefail
          if [ -z "$VERSION" ]; then
            # find latest release tag vX.Y.Z
            LATEST=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1 || true)
            if [ -z "$LATEST" ]; then
              VERSION="0.0.1"
            else
              MAJOR=$(echo "$LATEST" | sed -E 's/^v([0-9]+)\..*$/\1/')
              MINOR=$(echo "$LATEST" | sed -E 's/^v[0-9]+\.([0-9]+)\..*$/\1/')
              PATCH=$(echo "$LATEST" | sed -E 's/^v[0-9]+\.[0-9]+\.([0-9]+)$/\1/')
              PATCH=$((PATCH+1))
              VERSION="$MAJOR.$MINOR.$PATCH"
            fi
          else
            if ! echo "$VERSION" | grep -Eq '^[0-9]+\.[0-9]+\.[0-9]+$'; then
              echo "Input version '$VERSION' is not SemVer x.y.z" >&2; exit 1;
            fi
          fi
          BR="release/v$VERSION"
          RC="rc-v$VERSION-${GITHUB_RUN_NUMBER}"
          echo "branch=$BR" >> "$GITHUB_OUTPUT"
          echo "rc=$RC" >> "$GITHUB_OUTPUT"

      - name: Create and push release branch from base
        run: |
          BASE=${{ inputs.base_ref }}
          BR=${{ steps.names.outputs.branch }}
          git checkout -B "$BASE" origin/"$BASE"
          git checkout -B "$BR" "$BASE"
          git push origin "$BR"

      - name: Tag RC on release branch
        run: |
          RC=${{ steps.names.outputs.rc }}
          BR=${{ steps.names.outputs.branch }}
          git checkout "$BR"
          git tag -a "$RC" -m "RC $RC by ${{ github.actor }}"
          git push origin "$RC"

  gate-deploy:
    name: Approval to deploy to staging
    needs: create-branch-and-tag
    runs-on: ubuntu-latest
    environment: start-release
    steps:
      - name: Await approval
        run: echo "Approved to deploy to staging"

  build-staging:
    name: Build for staging
    needs: [gate-deploy, create-branch-and-tag]
    uses: ./.github/workflows/_build-reusable.yml
    with:
      ref: ''
      branch: ${{ needs.create-branch-and-tag.outputs.branch }}
      node_version: '20'

  deploy-staging:
    name: Deploy to staging (from release branch)
    needs: [build-staging, gate-deploy, create-branch-and-tag]
    uses: ./.github/workflows/_deploy-reusable.yml
    with:
      environment: staging
      ref: ''
      branch: ${{ needs.create-branch-and-tag.outputs.branch }}
